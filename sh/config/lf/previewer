#!/bin/sh

# File preview handler for lf.
# Dependencies:
#	- GNU 'file' or similar (file detection)
#	- bat (text)
#	- uebergzug (images, videos, pdf, fonts)
#	- ffmpegthumbnailer (videos)
#	- exiftool (metadata/audio, and file detection for .webm files)
#	- jq (json and metadata)
#	- lynx (html/web pages)
#	- pdftoppm (pdf)
#	- odt2txt (odt)
#	- convert from imagemagick (fonts)
#	- atool (archives)
#	- gpg (PGP encrypted files)
#	- man (troff manuals)
#	- Other: stat, cut, sha256sum
# exiftool 
# imagemagick 
# lynx
# bat
# jp2a
# chafa
# file

## sudo apt-get install libimage-exiftool-perl

# Notes:
#	- If using alacritty's same process: 'alacritty msg create-window', previews only show in first window

#set -C -f
#IFS='
#'

# Display an image with certain path, width, height, x, y
# Usage: image "$path_to_image" "$width" "$height" "$x" "$y" "$fallback_path"
# image() {
# 	if [ -f "$1" ] && [ "$DISPLAY" ] && [ ! "$WAYLAND_DISPLAY" ] \
# 		&& hash chafa >/dev/null 2>&1
# 	then
# 		printf '{"action": "add", "identifier": "PREVIEW", "path": "%s", "width": "%s", "height": "%s", "scaler": "contain", "x": "%s", "y": "%s"}\n' \
# 			"$1" "$(($2-1))" "$(($3-1))" "$4" "$5" > "$FIFO_UEBERZUG"
# 	else
# 		exiftool -j "$6" | jq -C
# 	fi
# }
image() {
ww=$(($2-12))
jp2a $1 --width=${ww} --color-depth=8 ;
chafa $1 --view-size ${ww}x$3 --scale max --polite=on; 
exiftool "$1"|batcat -ppfl c; 
printf "$1"; 
##chafa ${1} --view-size ${ww}x$3 --scale max --polite=on; 
##chafa --fill ascii -f symbols --symbols ascii
}

# 
# ifub() {
# 	if [ "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ]; then
# 		command -V chafa >/dev/null 2>&1
# 	fi
# }
	(text/*,0 | */xml,0 | application/javascript,0 | application/x-subrip,0 )
		batcat -p --wrap character --terminal-width "$(($2))" -f "$1"
	;;
	(application/zip,0 | application/x-7z-compressed,0 )
echo;zipinfo -h "$1"|batcat -pPfl c;	
echo;echo " -- -- -- --";
zipinfo -1 "$1"|batcat -pPfl perl;
echo;echo " -- -- -- -- ";echo;
zipinfo -t "$1"|batcat -pPfl c; 
	;;
	(audio/*,[01])
		exiftool "$1"|batcat -ppfl c
	;;
	(video/webm,0)
		# file --mime-type doesn't distinguish well between "video/webm"
		# actual webm videos or webm audios, but exiftool does, thus
		# re-run this function with new mimetype
		mime_type="$(exiftool -s3 -MIMEType "$1")" \
		ran_guard=$((ran_guard+1))
		mime_preview "$@"
		;;
	(video/*,[01])
	exiftool "$1"
		create_cache "$1"
		[ -f "$CACHE" ] \
			|| ffmpegthumbnailer -i "$1" -o "$CACHE" -s 0
		image "$CACHE" "$2" "$3" "$4" "$5" "$1"
	;;

main() {
	mime_type="$(file --dereference -b --mime-type -- "$1")" \
	mime_preview "$@" || return $?
}

main "$@" || exit $?
